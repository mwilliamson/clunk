import stdlib/assertions.assertThat;
import stdlib/matchers.equalTo;
import mammoth/html;

test "text nodes with text are not stripped" {
    var nodes = [html.text("H")];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([html.text("H")]));
}

test "empty text nodes are stripped" {
    var nodes = [html.text("")];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([]));
}

test "elements with non-empty children are not stripped" {
    var nodes = [html.element("p", [], [html.text("H")])];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([html.element("p", [], [html.text("H")])]));
}

test "elements with no children are stripped" {
    var nodes = [html.element("p", [], [])];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([]));
}

test "elements with only empty children are stripped" {
    var nodes = [html.element("p", [], [html.text("")])];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([]));
}

test "empty children are removed" {
    var nodes = [
        html.element("ul", [], [
            html.element("li", [], [html.text("")]),
            html.element("li", [], [html.text("H")]),
        ]),
    ];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([
        html.element("ul", [], [
            html.element("li", [], [html.text("H")]),
        ]),
    ]));
}

test "self-closing elements are never empty" {
    var nodes = [html.element("br", [], [])];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([html.element("br", [], [])]));
}

test "force writes are never empty" {
    var nodes = [html.forceWrite()];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([html.forceWrite()]));
}
