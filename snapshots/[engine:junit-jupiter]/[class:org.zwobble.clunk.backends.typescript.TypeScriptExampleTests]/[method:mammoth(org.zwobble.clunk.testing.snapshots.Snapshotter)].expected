Source path: src/documents.clunk
sealed interface DocumentElement {
}

record Bookmark(name: String) <: DocumentElement

record BreakLine() <: DocumentElement

record BreakPage() <: DocumentElement

record BreakColumn() <: DocumentElement

record Comment(
    commentId: String,
    body: List[DocumentElement],
    authorName: Option[String],
    authorInitials: Option[String],
)

record CommentReference(commentId: String) <: DocumentElement

record Document(
    children: List[DocumentElement],
    notes: List[Note],
    comments: List[Comment],
)

record Hyperlink(
    href: String,
    targetFrame: Option[String],
    children: List[DocumentElement],
) <: DocumentElement

record Image(
    altText: Option[String],
    contentType: Option[String],
) <: DocumentElement

record Note(
    noteType: NoteType,
    id: String,
    body: List[DocumentElement],
)

enum NoteType {
    FOOTNOTE,
    ENDNOTE,
}

record NoteReference(
    noteType: NoteType,
    noteId: String,
) <: DocumentElement

record NumberingLevel(
    levelIndex: String,
    isOrdered: Bool,
)

record NumberingStyle(
    numId: String,
)

record Paragraph(
    style: Option[String],
    numbering: Option[NumberingLevel],
    indent: ParagraphIndent,
    children: List[DocumentElement],
) <: DocumentElement

record ParagraphIndent(
    start: Option[String],
    end: Option[String],
    firstLine: Option[String],
    hanging: Option[String],
)

record Run(
    isBold: Bool,
    isItalic: Bool,
    isUnderline: Bool,
    isStrikethrough: Bool,
    isAllCaps: Bool,
    isSmallCaps: Bool,
    verticalAlignment: VerticalAlignment,
    style: Option[String],
    children: List[DocumentElement],
) <: DocumentElement

record Style(
    styleId: String,
    name: Option[String],
)

record Tab() <: DocumentElement

record Table(
    style: Option[Style],
    children: List[DocumentElement],
) <: DocumentElement

record TableCell(
    rowspan: Int,
    colspan: Int,
    children: List[DocumentElement],
) <: DocumentElement

record TableRow(
    children: List[DocumentElement],
    isHeader: Bool,
) <: DocumentElement

record Text(
    value: String,
) <: DocumentElement

enum VerticalAlignment {
    SUPERSCRIPT,
    SUBSCRIPT,
    BASELINE
}


==============

Source path: src/html.clunk
sealed interface HtmlNode {
}

record HtmlAttribute(name: String, value: String)

record HtmlElement(tag: HtmlTag, children: List[HtmlNode]) <: HtmlNode {
    property defaultTagName: String {
        return tag.defaultTagName;
    }
}

record HtmlForceWrite() <: HtmlNode

record HtmlTag(
    tagNames: List[String],
    attributes: List[HtmlAttribute],
    isCollapsible: Bool,
    separator: String,
) {
    property defaultTagName: String {
        return tagNames[0];
    }

    property isVoid: Bool {
        return defaultTagName == "br" ||
            defaultTagName == "hr" ||
            defaultTagName == "img";
    }
}

record HtmlText(value: String) <: HtmlNode


==============

Output path: documents.ts
type DocumentElement = Bookmark | BreakLine | BreakPage | BreakColumn | CommentReference | Hyperlink | Image | NoteReference | Paragraph | Run | Tab | Table | TableCell | TableRow | Text;

class Bookmark {
    readonly type: "Bookmark" = "Bookmark";
    readonly name: string;

    constructor(name: string) {
        this.name = name;
    }
}

class BreakLine {
    readonly type: "BreakLine" = "BreakLine";
}

class BreakPage {
    readonly type: "BreakPage" = "BreakPage";
}

class BreakColumn {
    readonly type: "BreakColumn" = "BreakColumn";
}

class Comment {
    readonly commentId: string;
    readonly body: (Array)<DocumentElement>;
    readonly authorName: string | null;
    readonly authorInitials: string | null;

    constructor(commentId: string, body: (Array)<DocumentElement>, authorName: string | null, authorInitials: string | null) {
        this.commentId = commentId;
        this.body = body;
        this.authorName = authorName;
        this.authorInitials = authorInitials;
    }
}

class CommentReference {
    readonly type: "CommentReference" = "CommentReference";
    readonly commentId: string;

    constructor(commentId: string) {
        this.commentId = commentId;
    }
}

class Document {
    readonly children: (Array)<DocumentElement>;
    readonly notes: (Array)<Note>;
    readonly comments: (Array)<Comment>;

    constructor(children: (Array)<DocumentElement>, notes: (Array)<Note>, comments: (Array)<Comment>) {
        this.children = children;
        this.notes = notes;
        this.comments = comments;
    }
}

class Hyperlink {
    readonly type: "Hyperlink" = "Hyperlink";
    readonly href: string;
    readonly targetFrame: string | null;
    readonly children: (Array)<DocumentElement>;

    constructor(href: string, targetFrame: string | null, children: (Array)<DocumentElement>) {
        this.href = href;
        this.targetFrame = targetFrame;
        this.children = children;
    }
}

class Image {
    readonly type: "Image" = "Image";
    readonly altText: string | null;
    readonly contentType: string | null;

    constructor(altText: string | null, contentType: string | null) {
        this.altText = altText;
        this.contentType = contentType;
    }
}

class Note {
    readonly noteType: NoteType;
    readonly id: string;
    readonly body: (Array)<DocumentElement>;

    constructor(noteType: NoteType, id: string, body: (Array)<DocumentElement>) {
        this.noteType = noteType;
        this.id = id;
        this.body = body;
    }
}

enum NoteType {
    FOOTNOTE,
    ENDNOTE,
}

class NoteReference {
    readonly type: "NoteReference" = "NoteReference";
    readonly noteType: NoteType;
    readonly noteId: string;

    constructor(noteType: NoteType, noteId: string) {
        this.noteType = noteType;
        this.noteId = noteId;
    }
}

class NumberingLevel {
    readonly levelIndex: string;
    readonly isOrdered: boolean;

    constructor(levelIndex: string, isOrdered: boolean) {
        this.levelIndex = levelIndex;
        this.isOrdered = isOrdered;
    }
}

class NumberingStyle {
    readonly numId: string;

    constructor(numId: string) {
        this.numId = numId;
    }
}

class Paragraph {
    readonly type: "Paragraph" = "Paragraph";
    readonly style: string | null;
    readonly numbering: NumberingLevel | null;
    readonly indent: ParagraphIndent;
    readonly children: (Array)<DocumentElement>;

    constructor(style: string | null, numbering: NumberingLevel | null, indent: ParagraphIndent, children: (Array)<DocumentElement>) {
        this.style = style;
        this.numbering = numbering;
        this.indent = indent;
        this.children = children;
    }
}

class ParagraphIndent {
    readonly start: string | null;
    readonly end: string | null;
    readonly firstLine: string | null;
    readonly hanging: string | null;

    constructor(start: string | null, end: string | null, firstLine: string | null, hanging: string | null) {
        this.start = start;
        this.end = end;
        this.firstLine = firstLine;
        this.hanging = hanging;
    }
}

class Run {
    readonly type: "Run" = "Run";
    readonly isBold: boolean;
    readonly isItalic: boolean;
    readonly isUnderline: boolean;
    readonly isStrikethrough: boolean;
    readonly isAllCaps: boolean;
    readonly isSmallCaps: boolean;
    readonly verticalAlignment: VerticalAlignment;
    readonly style: string | null;
    readonly children: (Array)<DocumentElement>;

    constructor(isBold: boolean, isItalic: boolean, isUnderline: boolean, isStrikethrough: boolean, isAllCaps: boolean, isSmallCaps: boolean, verticalAlignment: VerticalAlignment, style: string | null, children: (Array)<DocumentElement>) {
        this.isBold = isBold;
        this.isItalic = isItalic;
        this.isUnderline = isUnderline;
        this.isStrikethrough = isStrikethrough;
        this.isAllCaps = isAllCaps;
        this.isSmallCaps = isSmallCaps;
        this.verticalAlignment = verticalAlignment;
        this.style = style;
        this.children = children;
    }
}

class Style {
    readonly styleId: string;
    readonly name: string | null;

    constructor(styleId: string, name: string | null) {
        this.styleId = styleId;
        this.name = name;
    }
}

class Tab {
    readonly type: "Tab" = "Tab";
}

class Table {
    readonly type: "Table" = "Table";
    readonly style: Style | null;
    readonly children: (Array)<DocumentElement>;

    constructor(style: Style | null, children: (Array)<DocumentElement>) {
        this.style = style;
        this.children = children;
    }
}

class TableCell {
    readonly type: "TableCell" = "TableCell";
    readonly rowspan: number;
    readonly colspan: number;
    readonly children: (Array)<DocumentElement>;

    constructor(rowspan: number, colspan: number, children: (Array)<DocumentElement>) {
        this.rowspan = rowspan;
        this.colspan = colspan;
        this.children = children;
    }
}

class TableRow {
    readonly type: "TableRow" = "TableRow";
    readonly children: (Array)<DocumentElement>;
    readonly isHeader: boolean;

    constructor(children: (Array)<DocumentElement>, isHeader: boolean) {
        this.children = children;
        this.isHeader = isHeader;
    }
}

class Text {
    readonly type: "Text" = "Text";
    readonly value: string;

    constructor(value: string) {
        this.value = value;
    }
}

enum VerticalAlignment {
    SUPERSCRIPT,
    SUBSCRIPT,
    BASELINE,
}


==============

Output path: html.ts
type HtmlNode = HtmlElement | HtmlForceWrite | HtmlText;

class HtmlAttribute {
    readonly name: string;
    readonly value: string;

    constructor(name: string, value: string) {
        this.name = name;
        this.value = value;
    }
}

class HtmlElement {
    readonly type: "HtmlElement" = "HtmlElement";
    readonly tag: HtmlTag;
    readonly children: (Array)<HtmlNode>;

    constructor(tag: HtmlTag, children: (Array)<HtmlNode>) {
        this.tag = tag;
        this.children = children;
    }
    get defaultTagName(): string {
        return this.tag.defaultTagName;
    }
}

class HtmlForceWrite {
    readonly type: "HtmlForceWrite" = "HtmlForceWrite";
}

class HtmlTag {
    readonly tagNames: (Array)<string>;
    readonly attributes: (Array)<HtmlAttribute>;
    readonly isCollapsible: boolean;
    readonly separator: string;

    constructor(tagNames: (Array)<string>, attributes: (Array)<HtmlAttribute>, isCollapsible: boolean, separator: string) {
        this.tagNames = tagNames;
        this.attributes = attributes;
        this.isCollapsible = isCollapsible;
        this.separator = separator;
    }
    get defaultTagName(): string {
        return this.tagNames[0];
    }

    get isVoid(): boolean {
        return this.defaultTagName == "br" || this.defaultTagName == "hr" || this.defaultTagName == "img";
    }
}

class HtmlText {
    readonly type: "HtmlText" = "HtmlText";
    readonly value: string;

    constructor(value: string) {
        this.value = value;
    }
}


==============

[31mError: No test files found: "src/**/*Test.ts"[39m