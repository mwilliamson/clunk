Source path: src/documents.clunk
sealed interface DocumentElement {
}

record Bookmark(name: String) <: DocumentElement

record BreakLine() <: DocumentElement

record BreakPage() <: DocumentElement

record BreakColumn() <: DocumentElement

record Comment(
    commentId: String,
    body: List[DocumentElement],
    authorName: Option[String],
    authorInitials: Option[String],
)

record CommentReference(commentId: String) <: DocumentElement

record Document(
    children: List[DocumentElement],
    notes: List[Note],
    comments: List[Comment],
)

record Hyperlink(
    href: String,
    targetFrame: Option[String],
    children: List[DocumentElement],
) <: DocumentElement

record Image(
    altText: Option[String],
    contentType: Option[String],
) <: DocumentElement

record Note(
    noteType: NoteType,
    id: String,
    body: List[DocumentElement],
)

enum NoteType {
    FOOTNOTE,
    ENDNOTE,
}

record NoteReference(
    noteType: NoteType,
    noteId: String,
) <: DocumentElement

record NumberingLevel(
    levelIndex: String,
    isOrdered: Bool,
)

record NumberingStyle(
    numId: String,
)

record Paragraph(
    style: Option[String],
    numbering: Option[NumberingLevel],
    indent: ParagraphIndent,
    children: List[DocumentElement],
) <: DocumentElement

record ParagraphIndent(
    start: Option[String],
    end: Option[String],
    firstLine: Option[String],
    hanging: Option[String],
)

record Run(
    isBold: Bool,
    isItalic: Bool,
    isUnderline: Bool,
    isStrikethrough: Bool,
    isAllCaps: Bool,
    isSmallCaps: Bool,
    verticalAlignment: VerticalAlignment,
    style: Option[String],
    children: List[DocumentElement],
) <: DocumentElement

record Style(
    styleId: String,
    name: Option[String],
)

record Tab() <: DocumentElement

record Table(
    style: Option[Style],
    children: List[DocumentElement],
) <: DocumentElement

record TableCell(
    rowspan: Int,
    colspan: Int,
    children: List[DocumentElement],
) <: DocumentElement

record TableRow(
    children: List[DocumentElement],
    isHeader: Bool,
) <: DocumentElement

record Text(
    value: String,
) <: DocumentElement

enum VerticalAlignment {
    SUPERSCRIPT,
    SUBSCRIPT,
    BASELINE
}


==============

Source path: src/html.clunk
sealed interface HtmlNode {
}

record HtmlAttribute(name: String, value: String)

record HtmlElement(tag: HtmlTag, children: List[HtmlNode]) <: HtmlNode {
    property defaultTagName: String {
        return tag.defaultTagName;
    }
}

record HtmlForceWrite() <: HtmlNode

record HtmlTag(
    tagNames: List[String],
    attributes: List[HtmlAttribute],
    isCollapsible: Bool,
    separator: String,
) {
    property defaultTagName: String {
        return tagNames[0];
    }
}

record HtmlText(value: String) <: HtmlNode


==============

Output path: org/zwobble/mammoth/internal/documents/DocumentElement.java
package org.zwobble.mammoth.internal.documents;

public sealed interface DocumentElement permits Bookmark, BreakLine, BreakPage, BreakColumn, CommentReference, Hyperlink, Image, NoteReference, Paragraph, Run, Tab, Table, TableCell, TableRow, Text {
}


==============

Output path: org/zwobble/mammoth/internal/documents/Bookmark.java
package org.zwobble.mammoth.internal.documents;

public record Bookmark(String name) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/BreakLine.java
package org.zwobble.mammoth.internal.documents;

public record BreakLine() implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/BreakPage.java
package org.zwobble.mammoth.internal.documents;

public record BreakPage() implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/BreakColumn.java
package org.zwobble.mammoth.internal.documents;

public record BreakColumn() implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Comment.java
package org.zwobble.mammoth.internal.documents;

public record Comment(String commentId, java.util.List<DocumentElement> body, java.util.Optional<String> authorName, java.util.Optional<String> authorInitials) {
}

==============

Output path: org/zwobble/mammoth/internal/documents/CommentReference.java
package org.zwobble.mammoth.internal.documents;

public record CommentReference(String commentId) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Document.java
package org.zwobble.mammoth.internal.documents;

public record Document(java.util.List<DocumentElement> children, java.util.List<Note> notes, java.util.List<Comment> comments) {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Hyperlink.java
package org.zwobble.mammoth.internal.documents;

public record Hyperlink(String href, java.util.Optional<String> targetFrame, java.util.List<DocumentElement> children) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Image.java
package org.zwobble.mammoth.internal.documents;

public record Image(java.util.Optional<String> altText, java.util.Optional<String> contentType) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Note.java
package org.zwobble.mammoth.internal.documents;

public record Note(NoteType noteType, String id, java.util.List<DocumentElement> body) {
}

==============

Output path: org/zwobble/mammoth/internal/documents/NoteType.java
package org.zwobble.mammoth.internal.documents;

public enum NoteType {
    FOOTNOTE,
    ENDNOTE
}

==============

Output path: org/zwobble/mammoth/internal/documents/NoteReference.java
package org.zwobble.mammoth.internal.documents;

public record NoteReference(NoteType noteType, String noteId) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/NumberingLevel.java
package org.zwobble.mammoth.internal.documents;

public record NumberingLevel(String levelIndex, boolean isOrdered) {
}

==============

Output path: org/zwobble/mammoth/internal/documents/NumberingStyle.java
package org.zwobble.mammoth.internal.documents;

public record NumberingStyle(String numId) {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Paragraph.java
package org.zwobble.mammoth.internal.documents;

public record Paragraph(java.util.Optional<String> style, java.util.Optional<NumberingLevel> numbering, ParagraphIndent indent, java.util.List<DocumentElement> children) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/ParagraphIndent.java
package org.zwobble.mammoth.internal.documents;

public record ParagraphIndent(java.util.Optional<String> start, java.util.Optional<String> end, java.util.Optional<String> firstLine, java.util.Optional<String> hanging) {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Run.java
package org.zwobble.mammoth.internal.documents;

public record Run(boolean isBold, boolean isItalic, boolean isUnderline, boolean isStrikethrough, boolean isAllCaps, boolean isSmallCaps, VerticalAlignment verticalAlignment, java.util.Optional<String> style, java.util.List<DocumentElement> children) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Style.java
package org.zwobble.mammoth.internal.documents;

public record Style(String styleId, java.util.Optional<String> name) {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Tab.java
package org.zwobble.mammoth.internal.documents;

public record Tab() implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Table.java
package org.zwobble.mammoth.internal.documents;

public record Table(java.util.Optional<Style> style, java.util.List<DocumentElement> children) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/TableCell.java
package org.zwobble.mammoth.internal.documents;

public record TableCell(int rowspan, int colspan, java.util.List<DocumentElement> children) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/TableRow.java
package org.zwobble.mammoth.internal.documents;

public record TableRow(java.util.List<DocumentElement> children, boolean isHeader) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/Text.java
package org.zwobble.mammoth.internal.documents;

public record Text(String value) implements DocumentElement {
}

==============

Output path: org/zwobble/mammoth/internal/documents/VerticalAlignment.java
package org.zwobble.mammoth.internal.documents;

public enum VerticalAlignment {
    SUPERSCRIPT,
    SUBSCRIPT,
    BASELINE
}

==============

Output path: org/zwobble/mammoth/internal/html/HtmlNode.java
package org.zwobble.mammoth.internal.html;

public sealed interface HtmlNode permits HtmlElement, HtmlForceWrite, HtmlText {
}


==============

Output path: org/zwobble/mammoth/internal/html/HtmlAttribute.java
package org.zwobble.mammoth.internal.html;

public record HtmlAttribute(String name, String value) {
}

==============

Output path: org/zwobble/mammoth/internal/html/HtmlElement.java
package org.zwobble.mammoth.internal.html;

public record HtmlElement(HtmlTag tag, java.util.List<HtmlNode> children) implements HtmlNode {
    public String defaultTagName() {
        return tag.defaultTagName();
    }
}

==============

Output path: org/zwobble/mammoth/internal/html/HtmlForceWrite.java
package org.zwobble.mammoth.internal.html;

public record HtmlForceWrite() implements HtmlNode {
}

==============

Output path: org/zwobble/mammoth/internal/html/HtmlTag.java
package org.zwobble.mammoth.internal.html;

public record HtmlTag(java.util.List<String> tagNames, java.util.List<HtmlAttribute> attributes, boolean isCollapsible, String separator) {
    public String defaultTagName() {
        return tagNames.get(0);
    }
}

==============

Output path: org/zwobble/mammoth/internal/html/HtmlText.java
package org.zwobble.mammoth.internal.html;

public record HtmlText(String value) implements HtmlNode {
}

==============

╷
├─ JUnit Jupiter ✔
└─ JUnit Vintage ✔

Test run finished after TIME ms
[         2 containers found      ]
[         0 containers skipped    ]
[         2 containers started    ]
[         0 containers aborted    ]
[         2 containers successful ]
[         0 containers failed     ]
[         0 tests found           ]
[         0 tests skipped         ]
[         0 tests started         ]
[         0 tests aborted         ]
[         0 tests successful      ]
[         0 tests failed          ]
