Source path: src/mammoth/documents.clunk
sealed interface DocumentElement {
}

record Bookmark(name: String) <: DocumentElement

record BreakLine() <: DocumentElement

record BreakPage() <: DocumentElement

record BreakColumn() <: DocumentElement

record Comment(
    commentId: String,
    body: List[DocumentElement],
    authorName: Option[String],
    authorInitials: Option[String],
)

record CommentReference(commentId: String) <: DocumentElement

record Document(
    children: List[DocumentElement],
    notes: List[Note],
    comments: List[Comment],
)

record Hyperlink(
    href: String,
    targetFrame: Option[String],
    children: List[DocumentElement],
) <: DocumentElement

record Image(
    altText: Option[String],
    contentType: Option[String],
) <: DocumentElement

record Note(
    noteType: NoteType,
    id: String,
    body: List[DocumentElement],
)

enum NoteType {
    FOOTNOTE,
    ENDNOTE,
}

record NoteReference(
    noteType: NoteType,
    noteId: String,
) <: DocumentElement

record NumberingLevel(
    levelIndex: String,
    isOrdered: Bool,
)

record NumberingStyle(
    numId: String,
)

record Paragraph(
    style: Option[String],
    numbering: Option[NumberingLevel],
    indent: ParagraphIndent,
    children: List[DocumentElement],
) <: DocumentElement

record ParagraphIndent(
    start: Option[String],
    end: Option[String],
    firstLine: Option[String],
    hanging: Option[String],
)

record Run(
    isBold: Bool,
    isItalic: Bool,
    isUnderline: Bool,
    isStrikethrough: Bool,
    isAllCaps: Bool,
    isSmallCaps: Bool,
    verticalAlignment: VerticalAlignment,
    style: Option[String],
    children: List[DocumentElement],
) <: DocumentElement

record Style(
    styleId: String,
    name: Option[String],
)

record Tab() <: DocumentElement

record Table(
    style: Option[Style],
    children: List[DocumentElement],
) <: DocumentElement

record TableCell(
    rowspan: Int,
    colspan: Int,
    children: List[DocumentElement],
) <: DocumentElement

record TableRow(
    children: List[DocumentElement],
    isHeader: Bool,
) <: DocumentElement

record Text(
    value: String,
) <: DocumentElement

enum VerticalAlignment {
    SUPERSCRIPT,
    SUBSCRIPT,
    BASELINE
}


==============

Source path: src/mammoth/html.clunk
sealed interface HtmlNode {
}

record HtmlAttribute(name: String, value: String)

record HtmlElement(tag: HtmlTag, children: List[HtmlNode]) <: HtmlNode {
    property defaultTagName: String {
        return tag.defaultTagName;
    }
}

record HtmlForceWrite() <: HtmlNode

record HtmlTag(
    tagNames: List[String],
    attributes: List[HtmlAttribute],
    isCollapsible: Bool,
    separator: String,
) {
    property defaultTagName: String {
        return tagNames[0];
    }

    property isVoid: Bool {
        return defaultTagName == "br" ||
            defaultTagName == "hr" ||
            defaultTagName == "img";
    }
}

fun text(value: String) -> HtmlText {
    return HtmlText(value);
}

record HtmlText(value: String) <: HtmlNode {
    property isEmpty: Bool {
        return value == "";
    }
}

fun stripEmpty(nodes: List[HtmlNode]) -> List[HtmlNode] {
    return nodes.flatMap(stripEmptyNode);
}

fun stripEmptyNode(node: HtmlNode) -> List[HtmlNode] {
    switch (node) {
        case HtmlElement element {
            return [element];
        }

        case HtmlForceWrite forceWrite {
            return [forceWrite];
        }

        case HtmlText text {
            if (text.isEmpty) {
                return [];
            } else {
                return [text];
            }
        }
    }
}


==============

Source path: src/mammoth/html.test.clunk
import stdlib/assertions.assertThat;
import stdlib/matchers.equalTo;
import mammoth/html;

test "text nodes with text are not stripped" {
    var nodes = [html.text("H")];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([html.text("H")]));
}

test "empty text nodes are stripped" {
    var nodes = [html.text("")];

    var result = html.stripEmpty(nodes);

    assertThat(result, equalTo([]));
}


==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/DocumentElement.java
package org.zwobble.mammoth.internal.mammoth.documents;

public sealed interface DocumentElement permits Bookmark, BreakLine, BreakPage, BreakColumn, CommentReference, Hyperlink, Image, NoteReference, Paragraph, Run, Tab, Table, TableCell, TableRow, Text {
    <T> T accept(Visitor<T> visitor);
    public interface Visitor<T> {
        T visit(Bookmark bookmark);
        T visit(BreakLine breakLine);
        T visit(BreakPage breakPage);
        T visit(BreakColumn breakColumn);
        T visit(CommentReference commentReference);
        T visit(Hyperlink hyperlink);
        T visit(Image image);
        T visit(NoteReference noteReference);
        T visit(Paragraph paragraph);
        T visit(Run run);
        T visit(Tab tab);
        T visit(Table table);
        T visit(TableCell tableCell);
        T visit(TableRow tableRow);
        T visit(Text text);
    }
}


==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Bookmark.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Bookmark(String name) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/BreakLine.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record BreakLine() implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/BreakPage.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record BreakPage() implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/BreakColumn.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record BreakColumn() implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Comment.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Comment(String commentId, java.util.List<? extends DocumentElement> body, java.util.Optional<String> authorName, java.util.Optional<String> authorInitials) {
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/CommentReference.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record CommentReference(String commentId) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Document.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Document(java.util.List<? extends DocumentElement> children, java.util.List<Note> notes, java.util.List<Comment> comments) {
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Hyperlink.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Hyperlink(String href, java.util.Optional<String> targetFrame, java.util.List<? extends DocumentElement> children) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Image.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Image(java.util.Optional<String> altText, java.util.Optional<String> contentType) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Note.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Note(NoteType noteType, String id, java.util.List<? extends DocumentElement> body) {
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/NoteType.java
package org.zwobble.mammoth.internal.mammoth.documents;

public enum NoteType {
    FOOTNOTE,
    ENDNOTE
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/NoteReference.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record NoteReference(NoteType noteType, String noteId) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/NumberingLevel.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record NumberingLevel(String levelIndex, boolean isOrdered) {
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/NumberingStyle.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record NumberingStyle(String numId) {
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Paragraph.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Paragraph(java.util.Optional<String> style, java.util.Optional<NumberingLevel> numbering, ParagraphIndent indent, java.util.List<? extends DocumentElement> children) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/ParagraphIndent.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record ParagraphIndent(java.util.Optional<String> start, java.util.Optional<String> end, java.util.Optional<String> firstLine, java.util.Optional<String> hanging) {
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Run.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Run(boolean isBold, boolean isItalic, boolean isUnderline, boolean isStrikethrough, boolean isAllCaps, boolean isSmallCaps, VerticalAlignment verticalAlignment, java.util.Optional<String> style, java.util.List<? extends DocumentElement> children) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Style.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Style(String styleId, java.util.Optional<String> name) {
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Tab.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Tab() implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Table.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Table(java.util.Optional<Style> style, java.util.List<? extends DocumentElement> children) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/TableCell.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record TableCell(int rowspan, int colspan, java.util.List<? extends DocumentElement> children) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/TableRow.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record TableRow(java.util.List<? extends DocumentElement> children, boolean isHeader) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/Text.java
package org.zwobble.mammoth.internal.mammoth.documents;

public record Text(String value) implements DocumentElement {
    public <T> T accept(DocumentElement.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/documents/VerticalAlignment.java
package org.zwobble.mammoth.internal.mammoth.documents;

public enum VerticalAlignment {
    SUPERSCRIPT,
    SUBSCRIPT,
    BASELINE
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/html/HtmlNode.java
package org.zwobble.mammoth.internal.mammoth.html;

public sealed interface HtmlNode permits HtmlElement, HtmlForceWrite, HtmlText {
    <T> T accept(Visitor<T> visitor);
    public interface Visitor<T> {
        T visit(HtmlElement htmlElement);
        T visit(HtmlForceWrite htmlForceWrite);
        T visit(HtmlText htmlText);
    }
}


==============

Output path: org/zwobble/mammoth/internal/mammoth/html/HtmlAttribute.java
package org.zwobble.mammoth.internal.mammoth.html;

public record HtmlAttribute(String name, String value) {
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/html/HtmlElement.java
package org.zwobble.mammoth.internal.mammoth.html;

public record HtmlElement(HtmlTag tag, java.util.List<? extends HtmlNode> children) implements HtmlNode {
    public String defaultTagName() {
        return tag().defaultTagName();
    }
    public <T> T accept(HtmlNode.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/html/HtmlForceWrite.java
package org.zwobble.mammoth.internal.mammoth.html;

public record HtmlForceWrite() implements HtmlNode {
    public <T> T accept(HtmlNode.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/html/HtmlTag.java
package org.zwobble.mammoth.internal.mammoth.html;

public record HtmlTag(java.util.List<String> tagNames, java.util.List<HtmlAttribute> attributes, boolean isCollapsible, String separator) {
    public String defaultTagName() {
        return tagNames().get(0);
    }

    public boolean isVoid() {
        return defaultTagName().equals("br") || defaultTagName().equals("hr") || defaultTagName().equals("img");
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/html/HtmlText.java
package org.zwobble.mammoth.internal.mammoth.html;

public record HtmlText(String value) implements HtmlNode {
    public boolean isEmpty() {
        return value().equals("");
    }
    public <T> T accept(HtmlNode.Visitor<T> visitor) {
        return visitor.visit(this);
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/html/Html.java
package org.zwobble.mammoth.internal.mammoth.html;

import org.zwobble.mammoth.internal.mammoth.html.HtmlText;
import org.zwobble.mammoth.internal.mammoth.html.HtmlNode;
import org.zwobble.mammoth.internal.mammoth.html.HtmlElement;
import org.zwobble.mammoth.internal.mammoth.html.HtmlForceWrite;

public class Html {
    public static HtmlText text(String value) {
        return new HtmlText(value);
    }
    public static java.util.List<? extends HtmlNode> stripEmpty(java.util.List<? extends HtmlNode> nodes) {
        return nodes.stream().map(org.zwobble.mammoth.internal.mammoth.html.Html::stripEmptyNode).flatMap(java.util.List::stream).toList();
    }
    public static java.util.List<? extends HtmlNode> stripEmptyNode(HtmlNode node) {
        return node.accept(new HtmlNode.Visitor<>() {
            @Override
            public java.util.List<org.zwobble.mammoth.internal.mammoth.html.HtmlNode> visit(HtmlElement element) {
                return java.util.List.of(element);
            }
            @Override
            public java.util.List<org.zwobble.mammoth.internal.mammoth.html.HtmlNode> visit(HtmlForceWrite forceWrite) {
                return java.util.List.of(forceWrite);
            }
            @Override
            public java.util.List<org.zwobble.mammoth.internal.mammoth.html.HtmlNode> visit(HtmlText text) {
                if (text.isEmpty()) {
                    return java.util.List.of();
                } else {
                    return java.util.List.of(text);
                }
            }
        });
    }
}

==============

Output path: org/zwobble/mammoth/internal/mammoth/html/HtmlTests.java
package org.zwobble.mammoth.internal.mammoth.html;

import org.zwobble.mammoth.internal.mammoth.html.Html;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

public class HtmlTests {
    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("text nodes with text are not stripped")
    public void textNodesWithTextAreNotStripped() {
        var nodes = java.util.List.of(Html.text("H"));

        var result = Html.stripEmpty(nodes);

        assertThat(result, equalTo(java.util.List.of(Html.text("H"))));
    }
    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("empty text nodes are stripped")
    public void emptyTextNodesAreStripped() {
        var nodes = java.util.List.of(Html.text(""));

        var result = Html.stripEmpty(nodes);

        assertThat(result, equalTo(java.util.List.of()));
    }
}

==============

╷
├─ JUnit Jupiter ✔
│  └─ HtmlTests ✔
│     ├─ text nodes with text are not stripped ✔
│     └─ empty text nodes are stripped ✔
└─ JUnit Vintage ✔

Test run finished after TIME ms
[         3 containers found      ]
[         0 containers skipped    ]
[         3 containers started    ]
[         0 containers aborted    ]
[         3 containers successful ]
[         0 containers failed     ]
[         2 tests found           ]
[         0 tests skipped         ]
[         2 tests started         ]
[         0 tests aborted         ]
[         2 tests successful      ]
[         0 tests failed          ]
