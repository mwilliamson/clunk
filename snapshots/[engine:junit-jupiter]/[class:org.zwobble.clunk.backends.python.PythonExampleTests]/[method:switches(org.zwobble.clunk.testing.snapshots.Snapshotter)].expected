Source path: src/switches.test.clunk
import stdlib/assertions.assertThat;
import stdlib/matchers.equalTo;

sealed interface Node {
}

record Add(left: Node, right: Node) <: Node

record Literal(value: Int) <: Node

test "sum" {
    var node = Add(Add(Literal(2), Literal(7)), Literal(3));

    var result = evaluate(node);

    assertThat(result, equalTo(12));
}

fun evaluate(node: Node) -> Int {
    switch (node) {
        case Add {
            return evaluate(node.left) + evaluate(node.right);
        }
        case Literal {
            return node.value;
        }
    }
}


==============

Output path: switches_test.py
from __future__ import annotations

import dataclasses
from precisely import equal_to
from precisely import assert_that

class Node:
    pass

@dataclasses.dataclass(frozen=True)
class Add:
    left: Node
    right: Node
    def accept(self, visitor, /):
        return visitor.visit_add(self)

@dataclasses.dataclass(frozen=True)
class Literal:
    value: int
    def accept(self, visitor, /):
        return visitor.visit_literal(self)

def test_sum():
    node = Add(Add(Literal(2), Literal(7)), Literal(3))

    result = evaluate(node)

    assert_that(result, equal_to(12))

def evaluate(node, /):
    class Visitor:
        def visit_add(self, node, /):
            return evaluate(node.left) + evaluate(node.right)
        def visit_literal(self, node, /):
            return node.value
    return node.accept(Visitor())


==============

============================= test session starts ==============================
rootdir: ROOTDIR, configfile: tox.ini
collected 1 item

switches_test.py .                                                       [100%]

============================== 1 passed in TIME ===============================