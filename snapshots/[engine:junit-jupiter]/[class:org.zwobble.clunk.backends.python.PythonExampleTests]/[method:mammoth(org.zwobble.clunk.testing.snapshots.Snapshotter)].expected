Source path: src/html.clunk
sealed interface HtmlNode {
}

record HtmlAttribute(name: String, value: String)

record HtmlElement(tag: HtmlTag, children: List[HtmlNode]) <: HtmlNode

record HtmlForceWrite() <: HtmlNode

record HtmlTag(
    tagNames: List[String],
    attributes: List[HtmlAttribute],
    isCollapsible: Bool,
    separator: String,
) <: HtmlNode

record HtmlText(value: String)


==============

Source path: src/documents.clunk
sealed interface DocumentElement {
}

record Bookmark(name: String) <: DocumentElement

record BreakLine() <: DocumentElement

record BreakPage() <: DocumentElement

record BreakColumn() <: DocumentElement

record Comment(
    commentId: String,
    body: List[DocumentElement],
    authorName: Option[String],
    authorInitials: Option[String],
)

record CommentReference(commentId: String) <: DocumentElement

record Document(
    children: List[DocumentElement],
    notes: List[Note],
    comments: List[Comment],
)

record Hyperlink(
    href: String,
    targetFrame: Option[String],
    children: List[DocumentElement],
) <: DocumentElement

record Image(
    altText: Option[String],
    contentType: Option[String],
) <: DocumentElement

record Note(
    noteType: NoteType,
    id: String,
    body: List[DocumentElement],
)

enum NoteType {
    FOOTNOTE,
    ENDNOTE,
}

record NoteReference(
    noteType: NoteType,
    noteId: String,
) <: DocumentElement

record NumberingLevel(
    levelIndex: String,
    isOrdered: Bool,
)

record NumberingStyle(
    numId: String,
)

record Paragraph(
    style: Option[String],
    numbering: Option[NumberingLevel],
    indent: ParagraphIndent,
    children: List[DocumentElement],
) <: DocumentElement

record ParagraphIndent(
    start: Option[String],
    end: Option[String],
    firstLine: Option[String],
    hanging: Option[String],
)

record Run(
    isBold: Bool,
    isItalic: Bool,
    isUnderline: Bool,
    isStrikethrough: Bool,
    isAllCaps: Bool,
    isSmallCaps: Bool,
    verticalAlignment: VerticalAlignment,
    style: Option[String],
    children: List[DocumentElement],
) <: DocumentElement

record Style(
    styleId: String,
    name: Option[String],
)

record Tab() <: DocumentElement

record Table(
    style: Option[Style],
    children: List[DocumentElement],
) <: DocumentElement

record TableCell(
    rowspan: Int,
    colspan: Int,
    children: List[DocumentElement],
) <: DocumentElement

record TableRow(
    children: List[DocumentElement],
    isHeader: Bool,
) <: DocumentElement

record Text(
    value: String,
) <: DocumentElement

enum VerticalAlignment {
    SUPERSCRIPT,
    SUBSCRIPT,
    BASELINE
}


==============

Output path: html.py
import dataclasses
import typing
class HtmlNode:
    pass

@dataclasses.dataclass(frozen=True)
class HtmlAttribute:
    name: str
    value: str

@dataclasses.dataclass(frozen=True)
class HtmlElement:
    tag: HtmlTag
    children: typing.List[HtmlNode]

@dataclasses.dataclass(frozen=True)
class HtmlForceWrite:
    pass

@dataclasses.dataclass(frozen=True)
class HtmlTag:
    tagNames: typing.List[str]
    attributes: typing.List[HtmlAttribute]
    isCollapsible: bool
    separator: str

@dataclasses.dataclass(frozen=True)
class HtmlText:
    value: str


==============

Output path: documents.py
import dataclasses
import typing
import enum
class DocumentElement:
    pass

@dataclasses.dataclass(frozen=True)
class Bookmark:
    name: str

@dataclasses.dataclass(frozen=True)
class BreakLine:
    pass

@dataclasses.dataclass(frozen=True)
class BreakPage:
    pass

@dataclasses.dataclass(frozen=True)
class BreakColumn:
    pass

@dataclasses.dataclass(frozen=True)
class Comment:
    commentId: str
    body: typing.List[DocumentElement]
    authorName: typing.Optional[str]
    authorInitials: typing.Optional[str]

@dataclasses.dataclass(frozen=True)
class CommentReference:
    commentId: str

@dataclasses.dataclass(frozen=True)
class Document:
    children: typing.List[DocumentElement]
    notes: typing.List[Note]
    comments: typing.List[Comment]

@dataclasses.dataclass(frozen=True)
class Hyperlink:
    href: str
    targetFrame: typing.Optional[str]
    children: typing.List[DocumentElement]

@dataclasses.dataclass(frozen=True)
class Image:
    altText: typing.Optional[str]
    contentType: typing.Optional[str]

@dataclasses.dataclass(frozen=True)
class Note:
    noteType: NoteType
    id: str
    body: typing.List[DocumentElement]

class NoteType(enum.Enum):
    FOOTNOTE = enum.auto()
    ENDNOTE = enum.auto()

@dataclasses.dataclass(frozen=True)
class NoteReference:
    noteType: NoteType
    noteId: str

@dataclasses.dataclass(frozen=True)
class NumberingLevel:
    levelIndex: str
    isOrdered: bool

@dataclasses.dataclass(frozen=True)
class NumberingStyle:
    numId: str

@dataclasses.dataclass(frozen=True)
class Paragraph:
    style: typing.Optional[str]
    numbering: typing.Optional[NumberingLevel]
    indent: ParagraphIndent
    children: typing.List[DocumentElement]

@dataclasses.dataclass(frozen=True)
class ParagraphIndent:
    start: typing.Optional[str]
    end: typing.Optional[str]
    firstLine: typing.Optional[str]
    hanging: typing.Optional[str]

@dataclasses.dataclass(frozen=True)
class Run:
    isBold: bool
    isItalic: bool
    isUnderline: bool
    isStrikethrough: bool
    isAllCaps: bool
    isSmallCaps: bool
    verticalAlignment: VerticalAlignment
    style: typing.Optional[str]
    children: typing.List[DocumentElement]

@dataclasses.dataclass(frozen=True)
class Style:
    styleId: str
    name: typing.Optional[str]

@dataclasses.dataclass(frozen=True)
class Tab:
    pass

@dataclasses.dataclass(frozen=True)
class Table:
    style: typing.Optional[Style]
    children: typing.List[DocumentElement]

@dataclasses.dataclass(frozen=True)
class TableCell:
    rowspan: int
    colspan: int
    children: typing.List[DocumentElement]

@dataclasses.dataclass(frozen=True)
class TableRow:
    children: typing.List[DocumentElement]
    isHeader: bool

@dataclasses.dataclass(frozen=True)
class Text:
    value: str

class VerticalAlignment(enum.Enum):
    SUPERSCRIPT = enum.auto()
    SUBSCRIPT = enum.auto()
    BASELINE = enum.auto()


==============

============================= test session starts ==============================
rootdir: ROOTDIR, configfile: tox.ini
collected 0 items

============================ no tests ran in TIME =============================