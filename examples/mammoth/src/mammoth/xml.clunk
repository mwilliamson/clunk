sealed interface XmlNode {
}

interface XmlElementOrEmpty {
}

fun element(
    name: String,
    attributes: Map[String, String],
    children: List[XmlNode],
) -> XmlElement {
    return XmlElement(name, attributes, children);
}

record XmlElement(
    name: String,
    attributes: Map[String, String],
    children: List[XmlNode],
) <: XmlNode, XmlElementOrEmpty {
    fun findChildren(name: String) -> XmlElementList {
        return XmlElementList([
            for child in children
            if child instanceof XmlElement
            if child.name == name
            yield child
        ]);
    }

    fun getAttribute(name: String) -> Option[String] {
        return attributes.get(name);
    }
}

record XmlElementList(
    elements: List[XmlElement],
)

record XmlEmpty() <: XmlElementOrEmpty {
    fun getAttribute(name: String) -> Option[String] {
        return none();
    }
}


record XmlTextNode(
    value: String,
) <: XmlNode
