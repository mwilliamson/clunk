Source path: src/mammoth/documents.clunk
sealed interface DocumentElement {
}

interface HasChildren {
}

record Bookmark(name: String) <: DocumentElement

record BreakLine() <: DocumentElement

record BreakPage() <: DocumentElement

record BreakColumn() <: DocumentElement

record Comment(
    commentId: String,
    body: List[DocumentElement],
    authorName: Option[String],
    authorInitials: Option[String],
)

record CommentReference(commentId: String) <: DocumentElement

record Document(
    children: List[DocumentElement],
    notes: List[Note],
    comments: List[Comment],
) <: HasChildren

record Hyperlink(
    href: String,
    targetFrame: Option[String],
    children: List[DocumentElement],
) <: DocumentElement, HasChildren

record Image(
    altText: Option[String],
    contentType: Option[String],
) <: DocumentElement

record Note(
    noteType: NoteType,
    id: String,
    body: List[DocumentElement],
)

enum NoteType {
    FOOTNOTE,
    ENDNOTE,
}

record NoteReference(
    noteType: NoteType,
    noteId: String,
) <: DocumentElement

record NumberingLevel(
    levelIndex: String,
    isOrdered: Bool,
)

record NumberingStyle(
    numId: String,
)

record Paragraph(
    style: Option[String],
    numbering: Option[NumberingLevel],
    indent: ParagraphIndent,
    children: List[DocumentElement],
) <: DocumentElement, HasChildren

record ParagraphIndent(
    start: Option[String],
    end: Option[String],
    firstLine: Option[String],
    hanging: Option[String],
)

record Run(
    isBold: Bool,
    isItalic: Bool,
    isUnderline: Bool,
    isStrikethrough: Bool,
    isAllCaps: Bool,
    isSmallCaps: Bool,
    verticalAlignment: VerticalAlignment,
    style: Option[String],
    children: List[DocumentElement],
) <: DocumentElement, HasChildren

record Style(
    styleId: String,
    name: Option[String],
)

record Tab() <: DocumentElement

record Table(
    style: Option[Style],
    children: List[DocumentElement],
) <: DocumentElement, HasChildren

record TableCell(
    rowspan: Int,
    colspan: Int,
    children: List[DocumentElement],
) <: DocumentElement, HasChildren

record TableRow(
    children: List[DocumentElement],
    isHeader: Bool,
) <: DocumentElement, HasChildren

record Text(
    value: String,
) <: DocumentElement

enum VerticalAlignment {
    SUPERSCRIPT,
    SUBSCRIPT,
    BASELINE
}


==============

Source path: src/mammoth/docx/styles.clunk
import mammoth/xml.XmlElement;

// TODO: deal with naming conflict with namespace class Styles
record DocumentStyles() {
    fun findParagraphStyleById(name: String) -> Option[Style] {
        return none();
    }
}

record Style(name: Option[String])

fun readStylesXmlElement(element: XmlElement) -> DocumentStyles {
    return DocumentStyles();
}


==============

Source path: src/mammoth/docx/styles.test.clunk
import stdlib/assertions.assertThat;
import stdlib/matchers.equalTo;
import stdlib/matchers.hasMember;
import stdlib/matchers.isNone;
import stdlib/matchers.isSome;
import mammoth/docx/styles.readStylesXmlElement;
import mammoth/docx/styles.Style;
import mammoth/xml;

test "paragraph style is none if no style with that ID exists" {
    var element = xml.element("w:styles", #[], []);

    var styles = readStylesXmlElement(element);

    assertThat(styles.findParagraphStyleById("Heading1"), isNone());
}

test "paragraph style can be found by ID" {
    var element = xml.element("w:styles", #[], [
        xml.element("w:style", #[["w:type", "paragraph"], ["w:styleId", "Heading1"]], [
            xml.element("w:name", #[["w:val", "Heading 1"]], []),
        ]),
    ]);

    var styles = readStylesXmlElement(element);

    assertThat(
        styles.findParagraphStyleById("Heading1"),
        isSome(hasMember(Style::name, isSome(equalTo("Heading 1")))),
    );
}


==============

Source path: src/mammoth/html.clunk
sealed interface HtmlNode {
}

fun element(tagNames: List[String], attributes: Map[String, String], children: List[HtmlNode]) -> HtmlElement {
    return freshElement(tagNames, attributes, children);
}

fun collapsibleElement(tagNames: List[String], attributes: Map[String, String], children: List[HtmlNode]) -> HtmlElement {
    var tag = HtmlTag(tagNames, attributes, true, "");
    return HtmlElement(tag, children);
}

fun freshElement(tagNames: List[String], attributes: Map[String, String], children: List[HtmlNode]) -> HtmlElement {
    var tag = HtmlTag(tagNames, attributes, false, "");
    return HtmlElement(tag, children);
}

fun collapsibleElementWithSeparator(
    tagNames: List[String],
    attributes: Map[String, String],
    children: List[HtmlNode],
    separator: String,
) -> HtmlElement {
    var tag = HtmlTag(tagNames, attributes, true, separator);
    return HtmlElement(tag, children);
}

fun freshElementWithSeparator(
    tagNames: List[String],
    attributes: Map[String, String],
    children: List[HtmlNode],
    separator: String,
) -> HtmlElement {
    var tag = HtmlTag(tagNames, attributes, false, separator);
    return HtmlElement(tag, children);
}

record HtmlElement(tag: HtmlTag, children: List[HtmlNode]) <: HtmlNode {
    property attributes: Map[String, String] {
        return tag.attributes;
    }

    property defaultTagName: String {
        return tag.defaultTagName;
    }

    property tagNames: List[String] {
        return tag.tagNames;
    }

    property isCollapsible: Bool {
        return tag.isCollapsible;
    }

    property isVoid: Bool {
        return tag.isVoid;
    }

    property separator: String {
        return tag.separator;
    }
}

fun forceWrite() -> HtmlForceWrite {
    // TODO: support top-level variables
    return HtmlForceWrite();
}

record HtmlForceWrite() <: HtmlNode

record HtmlTag(
    tagNames: List[String],
    attributes: Map[String, String],
    isCollapsible: Bool,
    separator: String,
) {
    property defaultTagName: String {
        return tagNames.get(0);
    }

    property isVoid: Bool {
        return defaultTagName == "br" ||
            defaultTagName == "hr" ||
            defaultTagName == "img";
    }
}

fun text(value: String) -> HtmlText {
    return HtmlText(value);
}

record HtmlText(value: String) <: HtmlNode {
    property isEmpty: Bool {
        return value == "";
    }
}

fun stripEmpty(nodes: List[HtmlNode]) -> List[HtmlNode] {
    return nodes.flatMap[HtmlNode](stripEmptyNode);
}

fun stripEmptyNode(node: HtmlNode) -> List[HtmlNode] {
    switch (node) {
        case HtmlElement {
            var children = stripEmpty(node.children);
            if (!node.isVoid && children.length() == 0) {
                return [];
            } else {
                return [HtmlElement(node.tag, children)];
            }
        }

        case HtmlForceWrite {
            return [node];
        }

        case HtmlText {
            if (node.isEmpty) {
                return [];
            } else {
                return [node];
            }
        }
    }
}

fun collapse(nodes: List[HtmlNode]) -> List[HtmlNode] {
    var collapsed = MutableList[HtmlNode]();

    for (var node in nodes) {
        collapsingAdd(collapsed, node);
    }

    return collapsed;
}

fun collapsingAdd(collapsed: MutableList[HtmlNode], node: HtmlNode) -> Unit {
    var collapsedNode = collapseNode(node);
    if (!tryCollapse(collapsed, collapsedNode)) {
        collapsed.add(collapsedNode);
    }
}

fun collapseNode(node: HtmlNode) -> HtmlNode {
    switch (node) {
        case HtmlElement {
            return HtmlElement(
                node.tag,
                collapse(node.children),
            );
        }

        case HtmlForceWrite {
            return node;
        }

        case HtmlText {
            return node;
        }
    }
}

fun tryCollapse(collapsed: MutableList[HtmlNode], node: HtmlNode) -> Bool {
    if (collapsed.length() == 0) {
        return false;
    }

    var last = collapsed.last();

    if (!(node instanceof HtmlElement)) {
        return false;
    }

    if (!(last instanceof HtmlElement)) {
        return false;
    }

    if (!node.isCollapsible || !(node.tagNames.contains(last.defaultTagName) && node.attributes == last.attributes)) {
        return false;
    }

    if (node.separator != "") {
        (last.children as MutableList[HtmlNode]).add(text(node.separator));
    }

    for (var child in node.children) {
        collapsingAdd(last.children as MutableList[HtmlNode], child);
    }

    return true;
}


==============

Source path: src/mammoth/html.test.clunk
import stdlib/assertions.assertThat;
import stdlib/matchers.equalTo;
import mammoth/html;

testSuite "stripEmpty" {
    test "text nodes with text are not stripped" {
        var nodes = [html.text("H")];

        var result = html.stripEmpty(nodes);

        assertThat(result, equalTo([html.text("H")]));
    }

    test "empty text nodes are stripped" {
        var nodes = [html.text("")];

        var result = html.stripEmpty(nodes);

        assertThat(result, equalTo([]));
    }

    test "elements with non-empty children are not stripped" {
        var nodes = [html.element(["p"], #[], [html.text("H")])];

        var result = html.stripEmpty(nodes);

        assertThat(result, equalTo([html.element(["p"], #[], [html.text("H")])]));
    }

    test "elements with no children are stripped" {
        var nodes = [html.element(["p"], #[], [])];

        var result = html.stripEmpty(nodes);

        assertThat(result, equalTo([]));
    }

    test "elements with only empty children are stripped" {
        var nodes = [html.element(["p"], #[], [html.text("")])];

        var result = html.stripEmpty(nodes);

        assertThat(result, equalTo([]));
    }

    test "empty children are removed" {
        var nodes = [
            html.element(["ul"], #[], [
                html.element(["li"], #[], [html.text("")]),
                html.element(["li"], #[], [html.text("H")]),
            ]),
        ];

        var result = html.stripEmpty(nodes);

        assertThat(result, equalTo([
            html.element(["ul"], #[], [
                html.element(["li"], #[], [html.text("H")]),
            ]),
        ]));
    }

    test "self-closing elements are never empty" {
        var nodes = [html.element(["br"], #[], [])];

        var result = html.stripEmpty(nodes);

        assertThat(result, equalTo([html.element(["br"], #[], [])]));
    }

    test "force writes are never empty" {
        var nodes = [html.forceWrite()];

        var result = html.stripEmpty(nodes);

        assertThat(result, equalTo([html.forceWrite()]));
    }
}

testSuite "collapse" {
    test "collapsing does nothing to single text node" {
        var nodes = [html.text("Bluebells")];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([html.text("Bluebells")]));
    }

    test "consecutive fresh elements are not collapsed" {
        var nodes = [
            html.freshElement(["p"], #[], []),
            html.freshElement(["p"], #[], []),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.freshElement(["p"], #[], []),
            html.freshElement(["p"], #[], []),
        ]));
    }

    test "elements with different tag names are not collapsed" {
        var nodes = [
            html.collapsibleElement(["p"], #[], [html.text("One")]),
            html.collapsibleElement(["div"], #[], [html.text("Two")]),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.collapsibleElement(["p"], #[], [html.text("One")]),
            html.collapsibleElement(["div"], #[], [html.text("Two")]),
        ]));
    }

    test "elements with different attributes are not collapsed" {
        var nodes = [
            html.collapsibleElement(["p"], #[["id", "a"]], [html.text("One")]),
            html.collapsibleElement(["p"], #[], [html.text("Two")]),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.collapsibleElement(["p"], #[["id", "a"]], [html.text("One")]),
            html.collapsibleElement(["p"], #[], [html.text("Two")]),
        ]));
    }

    test "consecutive collapsible elements are collapsed if they have the same tag name and no attributes" {
        var nodes = [
            html.collapsibleElement(["p"], #[], [html.text("One")]),
            html.collapsibleElement(["p"], #[], [html.text("Two")]),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.collapsibleElement(["p"], #[], [html.text("One"), html.text("Two")]),
        ]));
    }

    test "consecutive collapsible elements are collapsed if they have the same tag name and same attributes" {
        var nodes = [
            html.collapsibleElement(["p"], #[["a", "1"], ["b", "2"]], [html.text("One")]),
            html.collapsibleElement(["p"], #[["b", "2"], ["a", "1"]], [html.text("Two")]),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.collapsibleElement(["p"], #[["a", "1"], ["b", "2"]], [html.text("One"), html.text("Two")]),
        ]));
    }

    test "children of elements are collapsed" {
        var nodes = [
            html.freshElement(["div"], #[], [
                html.collapsibleElement(["p"], #[], [html.text("One")]),
                html.collapsibleElement(["p"], #[], [html.text("Two")]),
            ]),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.freshElement(["div"], #[], [
                html.collapsibleElement(["p"], #[], [html.text("One"), html.text("Two")]),
            ]),
        ]));
    }

    test "children of collapsed element can collapse with children of previous element" {
        var nodes = [
            html.collapsibleElement(["blockquote"], #[], [
                html.collapsibleElement(["p"], #[], [html.text("One")]),
            ]),
            html.collapsibleElement(["blockquote"], #[], [
                html.collapsibleElement(["p"], #[], [html.text("Two")]),
            ]),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.collapsibleElement(["blockquote"], #[], [
                html.collapsibleElement(["p"], #[], [html.text("One"), html.text("Two")]),
            ]),
        ]));
    }

    test "collapsible element can collapse into previous fresh element" {
        var nodes = [
            html.freshElement(["p"], #[], []),
            html.collapsibleElement(["p"], #[], []),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.freshElement(["p"], #[], []),
        ]));
    }

    test "consecutive elements can collapse if second element has choice of tag names including main tag name of first element" {
        var nodes = [
            html.collapsibleElement(["ol"], #[], []),
            html.collapsibleElement(["ul", "ol"], #[], []),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.collapsibleElement(["ol"], #[], []),
        ]));
    }

    test "consecutive elements cannot collapse if second element has tag name as non-main tag name of first element" {
        var nodes = [
            html.collapsibleElement(["ul", "ol"], #[], []),
            html.collapsibleElement(["ol"], #[], []),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.collapsibleElement(["ul", "ol"], #[], []),
            html.collapsibleElement(["ol"], #[], []),
        ]));
    }

    test "when separator is present then separator is prepended to collapsed element" {
        var nodes = [
            html.freshElement(["pre"], #[], [html.text("Hello")]),
            html.collapsibleElementWithSeparator(
                ["pre"],
                #[],
                [html.text(" the"), html.text("re")],
                "\n"
            ),
        ];

        var result = html.collapse(nodes);

        assertThat(result, equalTo([
            html.freshElement(["pre"], #[], [
                html.text("Hello"),
                html.text("\n"),
                html.text(" the"),
                html.text("re"),
            ]),
        ]));
    }
}


==============

Source path: src/mammoth/xml.clunk
sealed interface XmlNode {
}

fun element(
    name: String,
    attributes: Map[String, String],
    children: List[XmlNode],
) -> XmlElement {
    return XmlElement(name, attributes, children);
}

record XmlElement(
    name: String,
    attributes: Map[String, String],
    children: List[XmlNode],
) <: XmlNode

record XmlTextNode(
    value: String,
) <: XmlNode


==============

Output path: mammoth/documents.py
from __future__ import annotations

import dataclasses
import typing
import enum
class DocumentElement:
    pass

class HasChildren:
    pass

@dataclasses.dataclass(frozen=True)
class Bookmark:
    name: str
    def accept(self, visitor, /):
        return visitor.visit_bookmark(self)

@dataclasses.dataclass(frozen=True)
class BreakLine:
    def accept(self, visitor, /):
        return visitor.visit_break_line(self)

@dataclasses.dataclass(frozen=True)
class BreakPage:
    def accept(self, visitor, /):
        return visitor.visit_break_page(self)

@dataclasses.dataclass(frozen=True)
class BreakColumn:
    def accept(self, visitor, /):
        return visitor.visit_break_column(self)

@dataclasses.dataclass(frozen=True)
class Comment:
    comment_id: str
    body: typing.List[DocumentElement]
    author_name: typing.Optional[str]
    author_initials: typing.Optional[str]

@dataclasses.dataclass(frozen=True)
class CommentReference:
    comment_id: str
    def accept(self, visitor, /):
        return visitor.visit_comment_reference(self)

@dataclasses.dataclass(frozen=True)
class Document:
    children: typing.List[DocumentElement]
    notes: typing.List[Note]
    comments: typing.List[Comment]

@dataclasses.dataclass(frozen=True)
class Hyperlink:
    href: str
    target_frame: typing.Optional[str]
    children: typing.List[DocumentElement]
    def accept(self, visitor, /):
        return visitor.visit_hyperlink(self)

@dataclasses.dataclass(frozen=True)
class Image:
    alt_text: typing.Optional[str]
    content_type: typing.Optional[str]
    def accept(self, visitor, /):
        return visitor.visit_image(self)

@dataclasses.dataclass(frozen=True)
class Note:
    note_type: NoteType
    id: str
    body: typing.List[DocumentElement]

class NoteType(enum.Enum):
    FOOTNOTE = enum.auto()
    ENDNOTE = enum.auto()

@dataclasses.dataclass(frozen=True)
class NoteReference:
    note_type: NoteType
    note_id: str
    def accept(self, visitor, /):
        return visitor.visit_note_reference(self)

@dataclasses.dataclass(frozen=True)
class NumberingLevel:
    level_index: str
    is_ordered: bool

@dataclasses.dataclass(frozen=True)
class NumberingStyle:
    num_id: str

@dataclasses.dataclass(frozen=True)
class Paragraph:
    style: typing.Optional[str]
    numbering: typing.Optional[NumberingLevel]
    indent: ParagraphIndent
    children: typing.List[DocumentElement]
    def accept(self, visitor, /):
        return visitor.visit_paragraph(self)

@dataclasses.dataclass(frozen=True)
class ParagraphIndent:
    start: typing.Optional[str]
    end: typing.Optional[str]
    first_line: typing.Optional[str]
    hanging: typing.Optional[str]

@dataclasses.dataclass(frozen=True)
class Run:
    is_bold: bool
    is_italic: bool
    is_underline: bool
    is_strikethrough: bool
    is_all_caps: bool
    is_small_caps: bool
    vertical_alignment: VerticalAlignment
    style: typing.Optional[str]
    children: typing.List[DocumentElement]
    def accept(self, visitor, /):
        return visitor.visit_run(self)

@dataclasses.dataclass(frozen=True)
class Style:
    style_id: str
    name: typing.Optional[str]

@dataclasses.dataclass(frozen=True)
class Tab:
    def accept(self, visitor, /):
        return visitor.visit_tab(self)

@dataclasses.dataclass(frozen=True)
class Table:
    style: typing.Optional[Style]
    children: typing.List[DocumentElement]
    def accept(self, visitor, /):
        return visitor.visit_table(self)

@dataclasses.dataclass(frozen=True)
class TableCell:
    rowspan: int
    colspan: int
    children: typing.List[DocumentElement]
    def accept(self, visitor, /):
        return visitor.visit_table_cell(self)

@dataclasses.dataclass(frozen=True)
class TableRow:
    children: typing.List[DocumentElement]
    is_header: bool
    def accept(self, visitor, /):
        return visitor.visit_table_row(self)

@dataclasses.dataclass(frozen=True)
class Text:
    value: str
    def accept(self, visitor, /):
        return visitor.visit_text(self)

class VerticalAlignment(enum.Enum):
    SUPERSCRIPT = enum.auto()
    SUBSCRIPT = enum.auto()
    BASELINE = enum.auto()


==============

Output path: mammoth/xml.py
from __future__ import annotations

import dataclasses
import typing
class XmlNode:
    pass

def element(name, attributes, children, /):
    return XmlElement(name, attributes, children)

@dataclasses.dataclass(frozen=True)
class XmlElement:
    name: str
    attributes: Map[str, str]
    children: typing.List[XmlNode]
    def accept(self, visitor, /):
        return visitor.visit_xml_element(self)

@dataclasses.dataclass(frozen=True)
class XmlTextNode:
    value: str
    def accept(self, visitor, /):
        return visitor.visit_xml_text_node(self)


==============

Output path: mammoth/docx/styles.py
from __future__ import annotations

import dataclasses
import typing
from mammoth.xml import XmlElement

# TODO: deal with naming conflict with namespace class Styles
@dataclasses.dataclass(frozen=True)
class DocumentStyles:
    def find_paragraph_style_by_id(self, name, /):
        return None

@dataclasses.dataclass(frozen=True)
class Style:
    name: typing.Optional[str]

def read_styles_xml_element(element, /):
    return DocumentStyles()


==============

Output path: mammoth/docx/styles_test.py
from __future__ import annotations

from precisely import equal_to
from precisely import assert_that
from precisely import has_attrs
from mammoth.docx.styles import read_styles_xml_element
from mammoth.docx.styles import Style
from mammoth import xml

def test_paragraph_style_is_none_if_no_style_with_that_id_exists():
    element = xml.element("w:styles", {}, [])

    styles = read_styles_xml_element(element)

    assert_that(styles.find_paragraph_style_by_id("Heading1"), equal_to(None))

def test_paragraph_style_can_be_found_by_id():
    element = xml.element("w:styles", {}, [xml.element("w:style", {"w:type": "paragraph", "w:styleId": "Heading1"}, [xml.element("w:name", {"w:val": "Heading 1"}, [])])])

    styles = read_styles_xml_element(element)

    assert_that(styles.find_paragraph_style_by_id("Heading1"), has_attrs(name=equal_to("Heading 1")))


==============

Output path: mammoth/html.py
from __future__ import annotations

import dataclasses
import typing
class HtmlNode:
    pass

def element(tag_names, attributes, children, /):
    return fresh_element(tag_names, attributes, children)

def collapsible_element(tag_names, attributes, children, /):
    tag = HtmlTag(tag_names, attributes, True, "")
    return HtmlElement(tag, children)

def fresh_element(tag_names, attributes, children, /):
    tag = HtmlTag(tag_names, attributes, False, "")
    return HtmlElement(tag, children)

def collapsible_element_with_separator(tag_names, attributes, children, separator, /):
    tag = HtmlTag(tag_names, attributes, True, separator)
    return HtmlElement(tag, children)

def fresh_element_with_separator(tag_names, attributes, children, separator, /):
    tag = HtmlTag(tag_names, attributes, False, separator)
    return HtmlElement(tag, children)

@dataclasses.dataclass(frozen=True)
class HtmlElement:
    tag: HtmlTag
    children: typing.List[HtmlNode]
    @property
    def attributes(self):
        return self.tag.attributes

    @property
    def default_tag_name(self):
        return self.tag.default_tag_name

    @property
    def tag_names(self):
        return self.tag.tag_names

    @property
    def is_collapsible(self):
        return self.tag.is_collapsible

    @property
    def is_void(self):
        return self.tag.is_void

    @property
    def separator(self):
        return self.tag.separator
    def accept(self, visitor, /):
        return visitor.visit_html_element(self)

def force_write():
    # TODO: support top-level variables
    return HtmlForceWrite()

@dataclasses.dataclass(frozen=True)
class HtmlForceWrite:
    def accept(self, visitor, /):
        return visitor.visit_html_force_write(self)

@dataclasses.dataclass(frozen=True)
class HtmlTag:
    tag_names: typing.List[str]
    attributes: Map[str, str]
    is_collapsible: bool
    separator: str
    @property
    def default_tag_name(self):
        return self.tag_names[0]

    @property
    def is_void(self):
        return self.default_tag_name == "br" or self.default_tag_name == "hr" or self.default_tag_name == "img"

def text(value, /):
    return HtmlText(value)

@dataclasses.dataclass(frozen=True)
class HtmlText:
    value: str
    @property
    def is_empty(self):
        return self.value == ""
    def accept(self, visitor, /):
        return visitor.visit_html_text(self)

def strip_empty(nodes, /):
    return [_result for _element in nodes for _result in strip_empty_node(_element)]

def strip_empty_node(node, /):
    class Visitor:
        def visit_html_element(self, node, /):
            children = strip_empty(node.children)
            if not node.is_void and len(children) == 0:
                return []
            else:
                return [HtmlElement(node.tag, children)]
        def visit_html_force_write(self, node, /):
            return [node]
        def visit_html_text(self, node, /):
            if node.is_empty:
                return []
            else:
                return [node]
    return node.accept(Visitor())

def collapse(nodes, /):
    collapsed = []

    for node in nodes:
        collapsing_add(collapsed, node)

    return collapsed

def collapsing_add(collapsed, node, /):
    collapsed_node = collapse_node(node)
    if not try_collapse(collapsed, collapsed_node):
        collapsed.append(collapsed_node)

def collapse_node(node, /):
    class Visitor:
        def visit_html_element(self, node, /):
            return HtmlElement(node.tag, collapse(node.children))
        def visit_html_force_write(self, node, /):
            return node
        def visit_html_text(self, node, /):
            return node
    return node.accept(Visitor())

def try_collapse(collapsed, node, /):
    if len(collapsed) == 0:
        return False

    last = collapsed[-1]

    if not isinstance(node, HtmlElement):
        return False

    if not isinstance(last, HtmlElement):
        return False

    if not node.is_collapsible or not (last.default_tag_name in node.tag_names and node.attributes == last.attributes):
        return False

    if node.separator != "":
        last.children.append(text(node.separator))

    for child in node.children:
        collapsing_add(last.children, child)

    return True


==============

Output path: mammoth/html_test.py
from __future__ import annotations

from precisely import equal_to
from precisely import assert_that
from mammoth import html

class StripEmptyTests:
    def test_text_nodes_with_text_are_not_stripped(self):
        nodes = [html.text("H")]

        result = html.strip_empty(nodes)

        assert_that(result, equal_to([html.text("H")]))

    def test_empty_text_nodes_are_stripped(self):
        nodes = [html.text("")]

        result = html.strip_empty(nodes)

        assert_that(result, equal_to([]))

    def test_elements_with_non_empty_children_are_not_stripped(self):
        nodes = [html.element(["p"], {}, [html.text("H")])]

        result = html.strip_empty(nodes)

        assert_that(result, equal_to([html.element(["p"], {}, [html.text("H")])]))

    def test_elements_with_no_children_are_stripped(self):
        nodes = [html.element(["p"], {}, [])]

        result = html.strip_empty(nodes)

        assert_that(result, equal_to([]))

    def test_elements_with_only_empty_children_are_stripped(self):
        nodes = [html.element(["p"], {}, [html.text("")])]

        result = html.strip_empty(nodes)

        assert_that(result, equal_to([]))

    def test_empty_children_are_removed(self):
        nodes = [html.element(["ul"], {}, [html.element(["li"], {}, [html.text("")]), html.element(["li"], {}, [html.text("H")])])]

        result = html.strip_empty(nodes)

        assert_that(result, equal_to([html.element(["ul"], {}, [html.element(["li"], {}, [html.text("H")])])]))

    def test_self_closing_elements_are_never_empty(self):
        nodes = [html.element(["br"], {}, [])]

        result = html.strip_empty(nodes)

        assert_that(result, equal_to([html.element(["br"], {}, [])]))

    def test_force_writes_are_never_empty(self):
        nodes = [html.force_write()]

        result = html.strip_empty(nodes)

        assert_that(result, equal_to([html.force_write()]))

class CollapseTests:
    def test_collapsing_does_nothing_to_single_text_node(self):
        nodes = [html.text("Bluebells")]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.text("Bluebells")]))

    def test_consecutive_fresh_elements_are_not_collapsed(self):
        nodes = [html.fresh_element(["p"], {}, []), html.fresh_element(["p"], {}, [])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.fresh_element(["p"], {}, []), html.fresh_element(["p"], {}, [])]))

    def test_elements_with_different_tag_names_are_not_collapsed(self):
        nodes = [html.collapsible_element(["p"], {}, [html.text("One")]), html.collapsible_element(["div"], {}, [html.text("Two")])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.collapsible_element(["p"], {}, [html.text("One")]), html.collapsible_element(["div"], {}, [html.text("Two")])]))

    def test_elements_with_different_attributes_are_not_collapsed(self):
        nodes = [html.collapsible_element(["p"], {"id": "a"}, [html.text("One")]), html.collapsible_element(["p"], {}, [html.text("Two")])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.collapsible_element(["p"], {"id": "a"}, [html.text("One")]), html.collapsible_element(["p"], {}, [html.text("Two")])]))

    def test_consecutive_collapsible_elements_are_collapsed_if_they_have_the_same_tag_name_and_no_attributes(self):
        nodes = [html.collapsible_element(["p"], {}, [html.text("One")]), html.collapsible_element(["p"], {}, [html.text("Two")])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.collapsible_element(["p"], {}, [html.text("One"), html.text("Two")])]))

    def test_consecutive_collapsible_elements_are_collapsed_if_they_have_the_same_tag_name_and_same_attributes(self):
        nodes = [html.collapsible_element(["p"], {"a": "1", "b": "2"}, [html.text("One")]), html.collapsible_element(["p"], {"b": "2", "a": "1"}, [html.text("Two")])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.collapsible_element(["p"], {"a": "1", "b": "2"}, [html.text("One"), html.text("Two")])]))

    def test_children_of_elements_are_collapsed(self):
        nodes = [html.fresh_element(["div"], {}, [html.collapsible_element(["p"], {}, [html.text("One")]), html.collapsible_element(["p"], {}, [html.text("Two")])])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.fresh_element(["div"], {}, [html.collapsible_element(["p"], {}, [html.text("One"), html.text("Two")])])]))

    def test_children_of_collapsed_element_can_collapse_with_children_of_previous_element(self):
        nodes = [html.collapsible_element(["blockquote"], {}, [html.collapsible_element(["p"], {}, [html.text("One")])]), html.collapsible_element(["blockquote"], {}, [html.collapsible_element(["p"], {}, [html.text("Two")])])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.collapsible_element(["blockquote"], {}, [html.collapsible_element(["p"], {}, [html.text("One"), html.text("Two")])])]))

    def test_collapsible_element_can_collapse_into_previous_fresh_element(self):
        nodes = [html.fresh_element(["p"], {}, []), html.collapsible_element(["p"], {}, [])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.fresh_element(["p"], {}, [])]))

    def test_consecutive_elements_can_collapse_if_second_element_has_choice_of_tag_names_including_main_tag_name_of_first_element(self):
        nodes = [html.collapsible_element(["ol"], {}, []), html.collapsible_element(["ul", "ol"], {}, [])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.collapsible_element(["ol"], {}, [])]))

    def test_consecutive_elements_cannot_collapse_if_second_element_has_tag_name_as_non_main_tag_name_of_first_element(self):
        nodes = [html.collapsible_element(["ul", "ol"], {}, []), html.collapsible_element(["ol"], {}, [])]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.collapsible_element(["ul", "ol"], {}, []), html.collapsible_element(["ol"], {}, [])]))

    def test_when_separator_is_present_then_separator_is_prepended_to_collapsed_element(self):
        nodes = [html.fresh_element(["pre"], {}, [html.text("Hello")]), html.collapsible_element_with_separator(["pre"], {}, [html.text(" the"), html.text("re")], "\n")]

        result = html.collapse(nodes)

        assert_that(result, equal_to([html.fresh_element(["pre"], {}, [html.text("Hello"), html.text("\n"), html.text(" the"), html.text("re")])]))


==============

============================= test session starts ==============================
rootdir: ROOTDIR, configfile: tox.ini
collected 22 items

mammoth/html_test.py ....................                                [ 90%]
mammoth/docx/styles_test.py .F                                           [100%]

=================================== FAILURES ===================================
___________________ test_paragraph_style_can_be_found_by_id ____________________
mammoth/docx/styles_test.py:22: in test_paragraph_style_can_be_found_by_id
    assert_that(styles.find_paragraph_style_by_id("Heading1"), has_attrs(name=equal_to("Heading 1")))
SITE-PACKAGES/precisely/__init__.py:50: in assert_that
    raise AssertionError("\nExpected:{0}\nbut:{1}".format(
E   AssertionError: 
E   Expected:
E     object with attributes:
E      * name: 'Heading 1'
E   but:
E     was missing attribute name
=========================== short test summary info ============================
FAILED mammoth/docx/styles_test.py::test_paragraph_style_can_be_found_by_id
========================= 1 failed, 21 passed in TIME =========================